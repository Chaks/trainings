package net.webservicex;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This web services was created to aid banks in meeting the requirements of the US Treasury Department's Office of Foreign Asset Control (OFAC). OFAC restricts transactions with specific countries, organizations and individuals.	The Office of Foreign Assets Control ('OFAC') of the US Department of the Treasury administers and enforces economic and trade sanctions based on US foreign policy and national security goals against targeted foreign countries, terrorists, international narcotics traffickers, and those engaged in activities related to the proliferation of weapons of mass destruction. OFAC acts under Presidential wartime and national emergency powers, as well as authority granted by specific legislation, to impose controls on transactions and freeze foreign assets under US jurisdiction. Many of the sanctions are based on United Nations and other international mandates, are multilateral in scope, and involve close cooperation with allied governments.
 *
 * This class was generated by Apache CXF 2.7.6
 * 2013-08-11T14:13:46.252+05:30
 * Generated source version: 2.7.6
 * 
 */
@WebServiceClient(name = "OFACSDN", 
                  wsdlLocation = "OFACSDN.wsdl",
                  targetNamespace = "http://www.webservicex.net/") 
public class OFACSDN extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.webservicex.net/", "OFACSDN");
    public final static QName OFACSDNHttpGet = new QName("http://www.webservicex.net/", "OFACSDNHttpGet");
    public final static QName OFACSDNSoap = new QName("http://www.webservicex.net/", "OFACSDNSoap");
    public final static QName OFACSDNSoap12 = new QName("http://www.webservicex.net/", "OFACSDNSoap12");
    public final static QName OFACSDNHttpPost = new QName("http://www.webservicex.net/", "OFACSDNHttpPost");
    static {
        URL url = OFACSDN.class.getResource("OFACSDN.wsdl");
        if (url == null) {
            url = OFACSDN.class.getClassLoader().getResource("OFACSDN.wsdl");
        } 
        if (url == null) {
            java.util.logging.Logger.getLogger(OFACSDN.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "OFACSDN.wsdl");
        }       
        WSDL_LOCATION = url;
    }

    public OFACSDN(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OFACSDN(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OFACSDN() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public OFACSDN(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public OFACSDN(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public OFACSDN(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns OFACSDNHttpGet
     */
    @WebEndpoint(name = "OFACSDNHttpGet")
    public OFACSDNHttpGet getOFACSDNHttpGet() {
        return super.getPort(OFACSDNHttpGet, OFACSDNHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OFACSDNHttpGet
     */
    @WebEndpoint(name = "OFACSDNHttpGet")
    public OFACSDNHttpGet getOFACSDNHttpGet(WebServiceFeature... features) {
        return super.getPort(OFACSDNHttpGet, OFACSDNHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns OFACSDNSoap
     */
    @WebEndpoint(name = "OFACSDNSoap")
    public OFACSDNSoap getOFACSDNSoap() {
        return super.getPort(OFACSDNSoap, OFACSDNSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OFACSDNSoap
     */
    @WebEndpoint(name = "OFACSDNSoap")
    public OFACSDNSoap getOFACSDNSoap(WebServiceFeature... features) {
        return super.getPort(OFACSDNSoap, OFACSDNSoap.class, features);
    }
    /**
     *
     * @return
     *     returns OFACSDNSoap
     */
    @WebEndpoint(name = "OFACSDNSoap12")
    public OFACSDNSoap getOFACSDNSoap12() {
        return super.getPort(OFACSDNSoap12, OFACSDNSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OFACSDNSoap
     */
    @WebEndpoint(name = "OFACSDNSoap12")
    public OFACSDNSoap getOFACSDNSoap12(WebServiceFeature... features) {
        return super.getPort(OFACSDNSoap12, OFACSDNSoap.class, features);
    }
    /**
     *
     * @return
     *     returns OFACSDNHttpPost
     */
    @WebEndpoint(name = "OFACSDNHttpPost")
    public OFACSDNHttpPost getOFACSDNHttpPost() {
        return super.getPort(OFACSDNHttpPost, OFACSDNHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OFACSDNHttpPost
     */
    @WebEndpoint(name = "OFACSDNHttpPost")
    public OFACSDNHttpPost getOFACSDNHttpPost(WebServiceFeature... features) {
        return super.getPort(OFACSDNHttpPost, OFACSDNHttpPost.class, features);
    }

}
